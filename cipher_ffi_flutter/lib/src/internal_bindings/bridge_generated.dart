// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class CipherFfiLib {
  Future<RsaKeyPair> rsaGenerateKey({required int keySize, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRsaGenerateKeyConstMeta;

  Future<Uint8List> rsaEncrypt(
      {required Uint8List data, required String publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRsaEncryptConstMeta;

  Future<Uint8List> rsaDecrypt(
      {required Uint8List data, required String privateKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRsaDecryptConstMeta;

  Future<void> aes128UpdateKey({required Uint8List key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128UpdateKeyConstMeta;

  Future<Uint8List> aes128Encrypt({required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128EncryptConstMeta;

  Future<Uint8List> aes128Decrypt({required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes128DecryptConstMeta;

  Future<void> aes256UpdateKey({required Uint8List key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256UpdateKeyConstMeta;

  Future<Uint8List> aes256Encrypt({required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256EncryptConstMeta;

  Future<Uint8List> aes256Decrypt({required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAes256DecryptConstMeta;
}

class RsaKeyPair {
  final int keySize;
  final String privateKey;
  final String publicKey;

  RsaKeyPair({
    required this.keySize,
    required this.privateKey,
    required this.publicKey,
  });
}

class CipherFfiLibImpl extends FlutterRustBridgeBase<CipherFfiLibWire>
    implements CipherFfiLib {
  factory CipherFfiLibImpl(ffi.DynamicLibrary dylib) =>
      CipherFfiLibImpl.raw(CipherFfiLibWire(dylib));

  CipherFfiLibImpl.raw(CipherFfiLibWire inner) : super(inner);

  Future<RsaKeyPair> rsaGenerateKey({required int keySize, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_rsa_generate_key(port_, _api2wire_i32(keySize)),
        parseSuccessData: _wire2api_rsa_key_pair,
        constMeta: kRsaGenerateKeyConstMeta,
        argValues: [keySize],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRsaGenerateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rsa_generate_key",
        argNames: ["keySize"],
      );

  Future<Uint8List> rsaEncrypt(
          {required Uint8List data, required String publicKey, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_rsa_encrypt(
            port_, _api2wire_uint_8_list(data), _api2wire_String(publicKey)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kRsaEncryptConstMeta,
        argValues: [data, publicKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRsaEncryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rsa_encrypt",
        argNames: ["data", "publicKey"],
      );

  Future<Uint8List> rsaDecrypt(
          {required Uint8List data,
          required String privateKey,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_rsa_decrypt(
            port_, _api2wire_uint_8_list(data), _api2wire_String(privateKey)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kRsaDecryptConstMeta,
        argValues: [data, privateKey],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRsaDecryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rsa_decrypt",
        argNames: ["data", "privateKey"],
      );

  Future<void> aes128UpdateKey({required Uint8List key, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_aes128_update_key(port_, _api2wire_uint_8_list(key)),
        parseSuccessData: _wire2api_unit,
        constMeta: kAes128UpdateKeyConstMeta,
        argValues: [key],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes128UpdateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes128_update_key",
        argNames: ["key"],
      );

  Future<Uint8List> aes128Encrypt({required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_aes128_encrypt(port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kAes128EncryptConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes128EncryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes128_encrypt",
        argNames: ["data"],
      );

  Future<Uint8List> aes128Decrypt({required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_aes128_decrypt(port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kAes128DecryptConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes128DecryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes128_decrypt",
        argNames: ["data"],
      );

  Future<void> aes256UpdateKey({required Uint8List key, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_aes256_update_key(port_, _api2wire_uint_8_list(key)),
        parseSuccessData: _wire2api_unit,
        constMeta: kAes256UpdateKeyConstMeta,
        argValues: [key],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes256UpdateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes256_update_key",
        argNames: ["key"],
      );

  Future<Uint8List> aes256Encrypt({required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_aes256_encrypt(port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kAes256EncryptConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes256EncryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes256_encrypt",
        argNames: ["data"],
      );

  Future<Uint8List> aes256Decrypt({required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_aes256_decrypt(port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kAes256DecryptConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAes256DecryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "aes256_decrypt",
        argNames: ["data"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

RsaKeyPair _wire2api_rsa_key_pair(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return RsaKeyPair(
    keySize: _wire2api_i32(arr[0]),
    privateKey: _wire2api_String(arr[1]),
    publicKey: _wire2api_String(arr[2]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class CipherFfiLibWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CipherFfiLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CipherFfiLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_rsa_generate_key(
    int port_,
    int key_size,
  ) {
    return _wire_rsa_generate_key(
      port_,
      key_size,
    );
  }

  late final _wire_rsa_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_rsa_generate_key');
  late final _wire_rsa_generate_key =
      _wire_rsa_generate_keyPtr.asFunction<void Function(int, int)>();

  void wire_rsa_encrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> public_key,
  ) {
    return _wire_rsa_encrypt(
      port_,
      data,
      public_key,
    );
  }

  late final _wire_rsa_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_rsa_encrypt');
  late final _wire_rsa_encrypt = _wire_rsa_encryptPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_rsa_decrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_uint_8_list> private_key,
  ) {
    return _wire_rsa_decrypt(
      port_,
      data,
      private_key,
    );
  }

  late final _wire_rsa_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_rsa_decrypt');
  late final _wire_rsa_decrypt = _wire_rsa_decryptPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_aes128_update_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_aes128_update_key(
      port_,
      key,
    );
  }

  late final _wire_aes128_update_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_aes128_update_key');
  late final _wire_aes128_update_key = _wire_aes128_update_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_aes128_encrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_aes128_encrypt(
      port_,
      data,
    );
  }

  late final _wire_aes128_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_aes128_encrypt');
  late final _wire_aes128_encrypt = _wire_aes128_encryptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_aes128_decrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_aes128_decrypt(
      port_,
      data,
    );
  }

  late final _wire_aes128_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_aes128_decrypt');
  late final _wire_aes128_decrypt = _wire_aes128_decryptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_aes256_update_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_aes256_update_key(
      port_,
      key,
    );
  }

  late final _wire_aes256_update_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_aes256_update_key');
  late final _wire_aes256_update_key = _wire_aes256_update_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_aes256_encrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_aes256_encrypt(
      port_,
      data,
    );
  }

  late final _wire_aes256_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_aes256_encrypt');
  late final _wire_aes256_encrypt = _wire_aes256_encryptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_aes256_decrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_aes256_decrypt(
      port_,
      data,
    );
  }

  late final _wire_aes256_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_aes256_decrypt');
  late final _wire_aes256_decrypt = _wire_aes256_decryptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
